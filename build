#!/usr/bin/env python3

import logging
import os.path
import imp
from functools import partial
from lib import open_yaml, open_yamls
from sys import argv

if __name__ != "__main__":
    raise ImportError("The build module is not meant to be imported: it is a "
                      "cli tool meant to be executed as-is.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

build_yaml_path = argv[1] if len(argv) > 1 else "build.yaml"
# Load the build.yaml file, and handle errors for it.
try:
    targets = open_yaml(build_yaml_path)
except IOError:
    logger.error("Could not find or open the %s file within the current path. "
                 "Exiting." % build_yaml_path)
    raise
if not isinstance(targets, list):
    logger.warning("The %s file was not a list. Assuming it is a build file "
                   "for only one target, and wrapping it into a single-item "
                   "list." % build_yaml_path)
    targets = [targets]

logger.info("Loaded build file. %d target(s) found." % len(targets))

search_paths = [os.path.abspath("."),
                os.path.abspath(os.path.dirname(build_yaml_path)),
                os.path.abspath(os.path.dirname(argv[0])),
                ""]
def expand_path(p):
    """Pick the first existing path in the search paths"""
    for s in search_paths:
        if os.path.exists(os.path.join(s, p)):
            return os.path.join(s, p)
    raise Exception("Path '%s' is not in any search path.")
output_path = os.path.abspath("output")
templates = {}

# Load in the needed processors and configuration files.
# Loading this stuff in first lets us see right away if we have some sort of
# syntax error in a template module, a bad config.yaml file, or similar.
for target in targets:
    base_path = expand_path(target["template"])
    if base_path not in templates:
        logger.info("Loading processor at '%s'." % base_path)
        base_config = open_yaml(os.path.join(base_path, "config.yaml"))
        module = imp.load_source("processor",
                                 os.path.join(base_path, "processor.py"))
        templates[base_path] = partial(module.process,
            base_config, base_path)

# process each of the targets
for target in targets:
    logger.info("Generating and writing output to %s" % target["output"])
    processor = templates[expand_path(target["template"])]
    if isinstance(target["data"], list):
        data = open_yamls(*[expand_path(p) for p in target["data"]])
    else:
        data = open_yaml(expand_path(target["data"]))
    processor(os.path.join(output_path, target["output"]), data)
